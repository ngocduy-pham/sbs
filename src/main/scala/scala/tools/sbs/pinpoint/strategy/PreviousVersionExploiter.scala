/*
 * PreviousVersionExploiter
 * 
 * Version
 * 
 * Created on November 7th, 2011
 * 
 * Created by ND P
 */

package scala.tools.sbs
package pinpoint
package strategy

import java.net.URL

import scala.collection.mutable.ArrayBuffer
import scala.tools.nsc.io.Directory
import scala.tools.sbs.common.Backuper
import scala.tools.sbs.common.Reflection
import scala.tools.sbs.util.Constant

trait PreviousVersionExploiter extends InstrumentationUtility {
  self: Configured =>

  def exploit[Exploited](previous: Directory,
                         currentContext: ClassLoader,
                         originalClasspathURLs: List[URL],
                         exploiting: List[URL] => Exploited): Exploited = {

    val backupArray = ArrayBuffer[Backuper]()
    val reflector = Reflection(config, log)

    previous.deepFiles foreach (file => {
      val relative = previous relativize file
      val className = relative.path.replace(Constant.SLASH, ".").replace(".class", "")
      try {
        val location = reflector.locationOf(className, currentContext).toDirectory // catch from here
        backup(List(location / relative toFile), location)
      }
      catch {
        case _: ClassNotFoundException => {
          log.debug(className + " not exists in current version")
        }
      }
    })
    val result = exploiting(previous.toURL :: originalClasspathURLs)

    restoreAll()

    result
  }

}
